openapi: 3.0.0
info:
  version: 0.1.0
  title: "Compcust API"
  description: "Just a simple API for Compcust project"
servers:
  - url: "http://localhost:8080/api"
paths:
  /register:
    post:
      summary: "Register a new user"
      description: "Returns a new user."
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - password_confirmation
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                  format: password
                password_confirmation:
                  type: string
                  format: password
            example:
              name: "John Doe"
              email: "john@example.com"
              password: "password"
              password_confirmation: "password"
      responses:
        "201":
          description: "User successfully registered"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int64
                      name:
                        type: string
                      email:
                        type: string
                      image:
                        type: string
                      created_at:
                        type: string
                        format: date-time
                      updated_at:
                        type: string
                        format: date-time
              example:
                message: "User registered."
                user:
                  id: 1
                  name: "John Doe"
                  email: "john@example.com"
                  image: "http://localhost:8080/images/users/img.png"
                  created_at: "2021-11-15T14:21:31.000000Z"
                  updated_at: "2021-11-15T14:21:31.000000Z"
        "422":
          description: "User is not created due to invalid data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/422"
              examples:
                empty:
                  summary: "Empty fields error"
                  value:
                    message: "The given data was invalid."
                    errors:
                      name:
                        - "The name field is required."
                      email:
                        - "The email field is required."
                      password:
                        - "The password field is required."
                uncofirmed_password:
                  summary: "Password not confimed"
                  value:
                    message: "The given data was invalid."
                    errors:
                      password:
                        - "The password confirmation does not match."
                exists:
                  summary: "User exists"
                  value:
                    message: "The given data was invalid."
                    errors:
                      email:
                        - "The email has already been taken."
  /login:
    post:
      summary: "Log in user"
      description: "Returns a user and token value."
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
                  format: password
            example:
              email: "john@example.com"
              password: "password"
      responses:
        "200":
          description: "Customer successfully created"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int64
                      name:
                        type: string
                      email:
                        type: string
                      image:
                        type: string
                      created_at:
                        type: string
                        format: date-time
                      updated_at:
                        type: string
                        format: date-time
                  token:
                    type: string
              example:
                message: User logged in.
                user:
                  id: 1
                  name: "John Doe"
                  email: "john@example.com"
                  image: "http://localhost:8080/images/users/img.png"
                  created_at: "2021-11-05T12:15:01.000000Z"
                  updated_at: "2021-11-05T12:15:01.000000Z"
                token: "22|TIXZ0B3oQmHsEQcrQQgtGbsx7bC9oa9Ys7PYn4qr"
        "422":
          description: "User is not created due to invalid data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/422"
              examples:
                empty:
                  summary: "Empty fields error"
                  value:
                    message: "The given data was invalid."
                    errors:
                      email:
                        - "The email field is required."
                      password:
                        - "The password field is required."
  /logout:
    get:
      summary: "Log out user."
      description: "Logs out user."
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "User logged out"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out
  /companies:
    get:
      summary: "Obtain a list of companies"
      description: "Returns a list of companies"
      tags:
        - Company
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/order"
      responses:
        "200":
          description: "Successfully returned a list of companies"
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/company"
              example:
                - id: 1
                  name: "Hills-Powlowski"
                  description": "We are the best company of the world. And the most humble."
                  address": "4267 Lexie Common Apt. 407 East Raulborough, IL 42168-6770"
                  phone: "1-570-506-3986"
                  created_at: "2021-11-05T12:14:40.000000Z"
                  updated_at: "2021-11-05T12:14:40.000000Z"
                - id: 2
                  name: "Walter, Kerluke and Lehner"
                  description: ""
                  address: "25950 Ziemann Ville Brakusbury, HI 29342-1364"
                  phone: "224-412-1884"
                  created_at: "2021-11-05T12:18:35.000000Z"
                  updated_at: "2021-11-05T12:18:35.000000Z"
                - ...: "..."
        "401":
          $ref: "#/components/responses/401"
    post:
      summary: "Allows a user to post a new company"
      description: "Returns a newly created company"
      tags:
        - Company
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - address
                - phone
              properties:
                name:
                  type: string
                description:
                  type: string
                address:
                  type: string
                phone:
                  type: string
            example:
              name: "Dach LLC"
              address: "46630 Arely Ports Apt. 943 Kiehnton, ME 70234"
              phone: "+1.510.923.0008"
      responses:
        "201":
          description: "Company successfully created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/company"
              example:
                id: 53
                name: "Dach LLC"
                description: ""
                address: "46630 Arely Ports Apt. 943 Kiehnton, ME 70234"
                phone: "+1.510.923.0008"
                created_at: "2021-11-06T11:44:01.000000Z"
                updated_at: "2021-11-06T11:44:01.000000Z"
        "401":
          $ref: "#/components/responses/401"
        "422":
          description: "Company is not created due to invalid data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/422"
              examples:
                empty:
                  summary: "Empty fields error"
                  value:
                    message: "The given data was invalid."
                    errors:
                      name:
                        - "The name field is required."
                      address:
                        - "The address field is required."
                      phone:
                        - "The phone field is required."
                exists:
                  summary: "The company already exists"
                  value:
                    message: "The given data was invalid."
                    errors:
                      name:
                        - "The name has already been taken."
  /companies/{id}:
    get:
      summary: "Obtain company by its unique ID"
      description: "Returns the single company"
      tags:
        - Company
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: "ID of company to return"
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        "200":
          description: "Successfully returned a company"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/company"
              example:
                id: 1
                name: "Hills-Powlowski"
                description: "We are the best company of the world. And the most humble."
                address: "4267 Lexie Common Apt. 407 East Raulborough, IL 42168-6770"
                phone: "1-570-506-3986"
                created_at: "2021-11-05T12:14:40.000000Z"
                updated_at: "2021-11-05T12:14:40.000000Z"
        "401":
          $ref: "#/components/responses/401"
        "404":
          description: "Company not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404"
              example:
                message: "Company not found."
    put:
      summary: "Allows a user to edit existing company"
      description: "Returns updated company"
      tags:
        - Company
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: "ID of company to edit"
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                address:
                  type: string
                phone:
                  type: string
            example:
              phone: "+1 (601) 201-2618"
      responses:
        "200":
          description: "Company successfully updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/company"
              example:
                id: 1
                name: "Hills-Powlowski"
                description: "We are the best company of the world. And the most humble"
                address: "404 Eleonora Mountain Suite 240, North Mortimer, NM 79109-5216"
                phone: "+1 (601) 201-2618"
                created_at: "2021-11-05T12:14:40.000000Z"
                updated_at: "2021-11-05T12:23:08.000000Z"
        "401":
          $ref: "#/components/responses/401"
        "404":
          description: "Company not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404"
              example:
                message: "Company not found."
        "422":
          description: "Company is not updated due to invalid data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/422"
              examples:
                empty:
                  summary: "Empty fields error"
                  value:
                    message: "The given data was invalid."
                    errors:
                      name:
                        - "The name field is required."
                      address:
                        - "The address field is required."
                      phone:
                        - "The phone field is required."
                exists:
                  summary: "The company already exists"
                  value:
                    message: "The given data was invalid."
                    errors:
                      name:
                        - "The name has already been taken."
    delete:
      summary: "Allows a user to delete a company"
      description: "Delete company by it's unique id"
      tags:
        - Company
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: "ID of company to delete"
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        "200":
          description: "Company successfully deleted"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Company successfully deleted."
        "401":
          $ref: "#/components/responses/401"
        "404":
          description: "Company not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404"
              example:
                message: "Company not found."
  /customers/{id}/companies:
    get:
      summary: "Obtain a list of customer's companies"
      description: "Returns a list of customer's companies"
      tags:
        - Company
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: "ID of the customer"
          required: true
          schema:
            type: integer
            format: int64
          example: 1
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/order"
      responses:
        "200":
          description: "Successfully returned a list of companies"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/company"
              example:
                example:
                - id: 1
                  name: "Hills-Powlowski"
                  description": "We are the best company of the world. And the most humble."
                  address": "4267 Lexie Common Apt. 407 East Raulborough, IL 42168-6770"
                  phone: "1-570-506-3986"
                  created_at: "2021-11-05T12:14:40.000000Z"
                  updated_at: "2021-11-05T12:14:40.000000Z"
                - id: 2
                  name: "Walter, Kerluke and Lehner"
                  description: ""
                  address: "25950 Ziemann Ville Brakusbury, HI 29342-1364"
                  phone: "224-412-1884"
                  created_at: "2021-11-05T12:18:35.000000Z"
                  updated_at: "2021-11-05T12:18:35.000000Z"
        "401":
          $ref: "#/components/responses/401"
        "404":
          description: "Customer not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404"
              example:
                message: "Customer not found."

  /customers:
    get:
      summary: "Obtain a list of customers"
      description: "Returns a list of customers"
      tags:
        - Customer
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/order"
      responses:
        "200":
          description: "Successfully returned a list of customers"
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/customer"
              example:
                - id: 1
                  name: "Dr. Jillian McLaughlin"
                  email: "jaiden.okeefe@example.net"
                  phone: "907.523.6993"
                  created_at: "2021-11-05T12:14:40.000000Z"
                  updated_at: "2021-11-05T12:14:40.000000Z"
                - id: 2
                  name: "Yolanda Wolf"
                  email: "kcollier@example.net"
                  phone: "(424) 333-7390"
                  created_at: "2021-11-05T12:14:59.000000Z"
                  updated_at: "2021-11-05T12:14:59.000000Z"
                - ...: "..."
        "401":
          $ref: "#/components/responses/401"
    post:
      summary: "Allows a user to post a new customer"
      description: "Post a new customer without relation to any company. The relation may be established later with PUT endpoint \"/companies/{id}/customers\". Returns a newly created customer."
      tags:
        - Customer
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - phone
              properties:
                name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
            example:
              name: "Todd Howell"
              email: "todd.howell@example.org"
              phone: "+1-239-630-0584"
      responses:
        "201":
          description: "Customer successfully created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customer"
              example:
                - id: 46
                  name: "Todd Howell"
                  email: "todd.howell@example.org"
                  phone: "+1-239-630-0584"
                  created_at: "2021-11-05T12:14:40.000000Z"
                  updated_at: "2021-11-05T12:14:40.000000Z"
        "401":
          $ref: "#/components/responses/401"
        "422":
          description: "Customer is not created due to invalid data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/422"
              examples:
                empty:
                  summary: "Empty fields error"
                  value:
                    message: "The given data was invalid."
                    errors:
                      name:
                        - "The name field is required."
                      address:
                        - "The address field is required."
                      phone:
                        - "The phone field is required."
                exists:
                  summary: "Customer already exists"
                  value:
                    message: "The given data was invalid."
                    errors:
                      email:
                        - "The email has already been taken."
                malformed_email:
                  summary: "Malformed E-mail"
                  value:
                    message: "The given data was invalid."
                    errors:
                      email:
                        - "The email must be a valid email address."
  /customers/{id}:
    get:
      summary: "Obtain customer by his unique ID"
      description: "Returns a single customer"
      tags:
        - Customer
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: "ID of customer to return"
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        "200":
          description: "Successfully returned customer"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customer"
              example:
                id: 1
                name: "Dr. Jillian McLaughlin"
                email: "jaiden.okeefe@example.net"
                phone: "907.523.6993"
                created_at: "2021-11-05T12:14:40.000000Z"
                updated_at: "2021-11-05T12:14:40.000000Z"
               
        "401":
          $ref: "#/components/responses/401"
        "404":
          description: "Customer not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404"
              example:
                message: "Customer not found."
    put:
      summary: "Allows a user to edit existing customer"
      description: "Returns updated customer"
      tags:
        - Customer
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: "ID of customer to edit"
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
            example:
              name: "Jillian McLaughlin"
      responses:
        "200":
          description: "Customer successfully updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customer"
              example:
                id: 1
                name: "Jillian McLaughlin"
                email: "jaiden.okeefe@example.net"
                phone: "907.523.6993"
                created_at: "2021-11-05T12:14:40.000000Z"
                updated_at: "2021-11-07T18:10:30.000000Z"
        "401":
          $ref: "#/components/responses/401"
        "404":
          description: "Customer not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404"
              example:
                message: "Customer not found."
        "422":
          description: "Customer is not updated due to invalid data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/422"
              examples:
                exists:
                  summary: "Customer already exists"
                  value:
                    message: "The given data was invalid."
                    errors:
                      email:
                        - "The email has already been taken."
                malformed_email:
                  summary: "Malformed E-mail"
                  value:
                    message: "The given data was invalid."
                    errors:
                      email:
                        - "The email must be a valid email address."
    delete:
      summary: "Allows a user to delete a customer"
      description: "Delete customer by it's unique id"
      tags:
        - Customer
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: "ID of a customer to delete"
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        "200":
          description: "Customer successfully deleted"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Customer successfully deleted."
        "401":
          $ref: "#/components/responses/401"
        "404":
          description: "Customer not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404"
              example:
                message: "Customer not found."
  /companies/{id}/customers:
    get:
      summary: "Obtain a list of company's customers"
      description: "Returns a list of company's customers"
      tags:
        - Customer
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: "ID of company"
          required: true
          schema:
            type: integer
            format: int64
          example: 1
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/order"
      responses:
        "200":
          description: "Successfully returned a list of customers"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/customer"
              example:
                - id: 1
                  name: "Dr. Jillian McLaughlin"
                  email: "jaiden.okeefe@example.net"
                  phone: "907.523.6993"
                  created_at: "2021-11-05T12:14:40.000000Z"
                  updated_at: "2021-11-05T12:14:40.000000Z"
                - id: 2
                  name: "Yolanda Wolf"
                  email: "kcollier@example.net"
                  phone: "(424) 333-7390"
                  created_at: "2021-11-05T12:14:59.000000Z"
                  updated_at: "2021-11-05T12:14:59.000000Z"
        "401":
          $ref: "#/components/responses/401"
        "404":
          description: "Company not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404"
              example:
                message: "Company not found."
    post:
      summary: "Allows a user to post new company's customer"
      description: "Returns the newly created company's customer"
      tags:
        - Customer
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: "ID of company"
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - phone
              properties:
                name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
            example:
              name: "Todd Howell"
              email: "todd.howell@example.org"
              phone: "+1-239-630-0584"
      responses:
        "201":
          description: "Customer successfully created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customer"
              example:
                - id: 46
                  company_id: 7
                  name: "Todd Howell"
                  email: "todd.howell@example.org"
                  phone: "+1-239-630-0584"
                  created_at: "2021-11-05T12:14:40.000000Z"
                  updated_at: "2021-11-05T12:14:40.000000Z"
        "401":
          $ref: "#/components/responses/401"
        "422":
          description: "Customer is not created due to invalid data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/422"
              examples:
                empty:
                  summary: "Empty fields error"
                  value:
                    message: "The given data was invalid."
                    errors:
                      name:
                        - "The name field is required."
                      address:
                        - "The address field is required."
                      phone:
                        - "The phone field is required."
                exists:
                  summary: "Customer already exists"
                  value:
                    message: "The given data was invalid."
                    errors:
                      email:
                        - "The email has already been taken."
                malformed_email:
                  summary: "Malformed E-mail"
                  value:
                    message: "The given data was invalid."
                    errors:
                      email:
                        - "The email must be a valid email address."
    put:
      summary: "Allows a user to bind one or more customers to company."
      description: "Requires a list of customers IDs."
      tags:
        - Customer
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: "ID of company"
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              items:
                required:
                  - ids
              properties:
                ids:
                  type: array
                  items:
                    type: number
            example:
              ids:
                - 5
                - 17
                - 43
      responses:
        "200":
          description: "Customer(s) successfully bound to company."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example:
                      "Customer(s) successfully bound to company."
        "401":
          $ref: "#/components/responses/401"
        "422":
          description: "Customer(s) not bount to company due to invalid data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/422"
              examples:
                empty:
                  summary: "Empty ID list"
                  value:
                    message: "The given data was invalid."
                    errors:
                      ids:
                        - "The ids field is required."
                malformed_id:
                  summary: "Malformed third ID"
                  value:
                    message: "The given data was invalid."
                    errors:
                      ids.2:
                        - "The ids.2 must only contain letters and numbers."
    delete:
      summary: "Allows a user to unbind one or more customers from company."
      description: "Requires a list of customers IDs."
      tags:
        - Customer
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: "ID of company"
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        "200":
          description: "Customer(s) successfully unbound from company."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example:
                      "Customer(s) successfully unbound from company."
        "401":
          $ref: "#/components/responses/401"
        "422":
          description: "Customer(s) not unbount from company due to invalid data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/422"
              examples:
                empty:
                  summary: "Empty ID list"
                  value:
                    message: "The given data was invalid."
                    errors:
                      ids:
                        - "The ids field is required."
                malformed_id:
                  summary: "Malformed third ID"
                  value:
                    message: "The given data was invalid."
                    errors:
                      ids.2:
                        - "The ids.2 must only contain letters and numbers."
  /companies/{id}/customers/ids:
    get:
      summary: "Obtain a list of IDs of all company's customers"
      description: "Returns a list of IDs"
      tags:
        - Customer
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: "ID of customer to return"
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        "200":
          description: "Successfully returned a list of IDs"
          content:
            "application/json":
              schema:
                type: array
                items:
                  type: number
              example:
                - 1
                - 5
                - 8
                - 9
                - 17
        "401":
            $ref: "#/components/responses/401"
        "404":
          description: "Company not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404"
              example:
                message: "Company not found."
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    company:
      type: object
      required:
        - name
        - address
        - phone
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        address:
          type: string
        phone:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    customer:
      type: object
      required:
        - name
        - email
        - phone
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    404:
      type: object
      properties:
        message:
          type: string
    422:
      type: object
      properties:
        message:
          type: string
        errors:
          type: object
  parameters:
    limit:
      name: limit
      in: query
      description: Limits the number of items on a page (max 300)
      schema:
        type: integer
        default: 50
        maximum: 300
    offset:
      name: offset
      in: query
      description: Specifies the offset of items
      schema:
        type: integer
    sort:
      name: sort
      in: query
      description: Specifies the field a list to be sorted by
      schema:
        type: string
    order:
      name: order
      in: query
      description: Specifies the direction a list to be sorted by
      schema:
        type: string
  responses:
    401:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthenticated"